<?php

namespace App\Controller;

use App\Entity\DemandeDeService;
use App\Form\DemandeDeServiceType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/demande/de/service')]
class DemandeDeServiceController extends AbstractController
{
    #[Route('/', name: 'demande_de_service_index', methods: ['GET'])]
    public function index(): Response
    {
        $demandeDeServices = $this->getDoctrine()
            ->getRepository(DemandeDeService::class)
            ->findAll();

        return $this->render('demande_de_service/index.html.twig', [
            'demande_de_services' => $demandeDeServices,
        ]);
    }

    #[Route('/new', name: 'demande_de_service_new', methods: ['GET','POST'])]
    public function new(Request $request): Response
    {
        $demandeDeService = new DemandeDeService();
        $form = $this->createForm(DemandeDeServiceType::class, $demandeDeService);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($demandeDeService);
            $entityManager->flush();

            return $this->redirectToRoute('demande_de_service_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->renderForm('demande_de_service/new.html.twig', [
            'demande_de_service' => $demandeDeService,
            'form' => $form,
        ]);
    }

    #[Route('/{idDemandeService}', name: 'demande_de_service_show', methods: ['GET'])]
    public function show(DemandeDeService $demandeDeService): Response
    {
        return $this->render('demande_de_service/show.html.twig', [
            'demande_de_service' => $demandeDeService,
        ]);
    }

    #[Route('/{idDemandeService}/edit', name: 'demande_de_service_edit', methods: ['GET','POST'])]
    public function edit(Request $request, DemandeDeService $demandeDeService): Response
    {
        $form = $this->createForm(DemandeDeServiceType::class, $demandeDeService);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('demande_de_service_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->renderForm('demande_de_service/edit.html.twig', [
            'demande_de_service' => $demandeDeService,
            'form' => $form,
        ]);
    }

    #[Route('/{idDemandeService}', name: 'demande_de_service_delete', methods: ['POST'])]
    public function delete(Request $request, DemandeDeService $demandeDeService): Response
    {
        if ($this->isCsrfTokenValid('delete'.$demandeDeService->getIdDemandeService(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($demandeDeService);
            $entityManager->flush();
        }

        return $this->redirectToRoute('demande_de_service_index', [], Response::HTTP_SEE_OTHER);
    }
}
